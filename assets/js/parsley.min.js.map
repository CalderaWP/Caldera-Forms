{"version":3,"sources":["parsley.min.js","/source/parsley.js","/source/src/parsley/pubsub.js","/source/src/parsley/utils.js","/source/src/parsley/defaults.js","/source/src/parsley/abstract.js","/source/src/parsley/validator.js","/source/src/parsley/validator_registry.js","/source/src/parsley/ui.js","/source/src/parsley/form.js","/source/src/parsley/factory/constraint.js","/source/src/parsley/field.js","/source/src/parsley/multiple.js","/source/src/parsley/factory.js","/source/src/parsley/main.js","/source/src/parsley/remote.js","/source/src/i18n/en.js","/source/src/parsley.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_slice","prototype","slice","global","factory","exports","module","require","define","amd","parsley","jQuery","this","$","adapt","fn","context","parsleyAdaptedCallback","args","call","arguments","unshift","apply","o","eventName","name","lastIndexOf","eventPrefix","substr","globalID","pastWarnings","ParsleyUtils__ParsleyUtils","attr","$element","namespace","obj","attribute","attributes","regex","RegExp","hasOwnProperty","specified","test","camelize","deserializeValue","value","checkAttr","_checkAttr","is","setAttr","setAttribute","dasherize","String","generateID","num","isNaN","Number","parseJSON","e","str","replace","match","chr","toUpperCase","toLowerCase","warn","_window$console","window","console","warnOnce","msg","_resetWarnings","trimString","string","objectCreate","Object","create","Error","TypeError","result","ParsleyUtils__default","ParsleyDefaults","inputs","excluded","priorityEnabled","multiple","group","uiEnabled","validationThreshold","focus","trigger","errorClass","successClass","classHandler","ParsleyField","errorsContainer","errorsWrapper","errorTemplate","ParsleyAbstract","asyncSupport","actualizeOptions","options","domOptions","parent","_resetOptions","initOptions","_listeners","on","queue","push","subscribe","listenTo","off","splice","unsubscribe","unsubscribeTo","target","extraArg","reset","__class__","_trigger","fields","destroy","removeData","asyncIsValid","force","whenValid","_findRelated","find","requirementConverters","_string","integer","parseInt","number","parseFloat","reference","boolean","object","regexp","_regexp","flags","convertArrayRequirement","m","values","split","map","convertRequirement","requirementType","converter","convertExtraOptionRequirement","requirementSpec","extraOptionReader","main","extra","key","ParsleyValidator","spec","extend","validate","requirementFirstArg","validateMultiple","validateNumber","validateString","parseRequirements","requirements","type","isPlainObject","priority","ParsleyValidatorRegistry","validators","catalog","locale","init","typeRegexes","email","digits","alphanum","url","range","decimalPlaces","Math","max","addValidator","Parsley","setLocale","addCatalog","messages","set","addMessage","message","addMessages","nameMessageObject","arg1","arg2","_setValidator","updateValidator","removeValidator","validator","getErrorMessage","constraint","typeMessages","formatMessage","defaultMessage","en","parameters","notblank","required","_ref","undefined","_ref$step","step","_ref$base","base","nb","mul","pow","pattern","minlength","requirement","maxlength","min","mincheck","maxcheck","check","equalto","refOrValue","$reference","val","ParsleyUI","listen","_this","form","setupForm","field","setupField","reflow","fieldInstance","_ui","active","diff","_diff","validationResult","lastValidationResult","manageStatusClass","manageErrorsMessages","actualizeTriggers","kept","added","failedOnce","manageFailingFieldTrigger","getErrorsMessages","errorMessage","_getErrorMessage","assert","hasConstraints","needsValidation","_successClass","_errorClass","_resetClass","errorsMessagesDisabled","_insertErrorWrapper","$errorsWrapper","append","addClass","html","removeClass","remove","removed","removeError","addError","updateError","doNotUpdateClass","formInstance","_focusedField","noFocus","customConstraintErrorMessage","newResult","oldResult","deep","found","j","evt","onSubmitValidate","onSubmitButton","__id__","$errorClassHandler","_manageClassHandler","errorsWrapperId","validationInformationVisible","$handler","$errorsContainer","$from","after","_this2","$toBind","triggers","join","event","eventValidate","getValue","each","parsleyInstance","children","ParsleyForm","element","ParsleyForm__statusMapping","pending","resolved","rejected","_this3","_$submitSource","first","stopImmediatePropagation","preventDefault","whenValidate","done","_submit","always","appendTo","Event","_arguments","state","_this4","_ref2","submitEvent","_refreshFields","promises","_withoutReactualizingFormOptions","promiseBasedOnValidationResult","r","Deferred","reject","resolve","promise","when","fail","pipe","isValid","_arguments2","_this5","_ref3","_bindFields","_this6","oldFields","fieldsMappedById","not","_","Factory","oldActualizeOptions","ConstraintFactory","parsleyField","isDomConstraint","validatorSpec","_validatorRegistry","_parseRequirements","capitalize","cap","instance","requirementList","_this7","parsleyFormInstance","constraints","constraintsByName","_bindConstraints","parsley_field__statusMapping","_this8","_ref4","refreshConstraints","_isInGroup","_refreshed","_isRequired","validateIfEmpty","inArray","_arguments3","_this9","_ref5","_ref5$force","groupedConstraints","_getGroupedConstraints","_validateConstraint","_this10","_handleWhitespace","addConstraint","removeConstraint","updateConstraint","_bindHtml5Constraints","hasClass","trimValue","whitespace","index","p","sort","a","b","parsley_field","ParsleyMultiple","addElement","$elements","fieldConstraints","has","data","filter","_init","ParsleyFactory","savedparsleyFormInstance","__version__","bind","isMultiple","handleMultiple","parsleyMultipleInstance","_this11","input","$previouslyRelated","get","doNotStore","ParsleyExtend","vernums","jquery","forEach","document","version","psly","instances","ParsleyConfig","ParsleyUtils","registry","i18n","method","proxy","_window$Parsley","autoBind","deprecated","callback","unsubscribeAll","emit","_instance","instanceGiven","asyncValidators","default","xhr","status","reverse","addAsyncValidator","ajaxOptions","csr","indexOf","encodeURIComponent","remoteOptions","param","_remoteCache","ajax","handleXhr","then"],"mappings":"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","file":"parsley.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var ParsleyUtils__ParsleyUtils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function ($element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj)\n        obj = {};\n      else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n            delete obj[i];\n        }\n      }\n\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\n        return obj;\n\n      attributes = $element[0].attributes;\n      for (i = attributes.length; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function ($element, namespace, checkAttr) {\n      return $element.is('[' + namespace + checkAttr + ']');\n    },\n\n    setAttr: function ($element, namespace, attr, value) {\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function () {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function (value) {\n      var num;\n\n      try {\n        return value ?\n          value == \"true\" ||\n          (value == \"false\" ? false :\n          value == \"null\" ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n          value)\n          : value;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return str.replace(/::/g, '/')\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n        .replace(/_/g, '-')\n        .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console && 'function' === typeof window.console.warn)\n        window.console.warn(...arguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n      }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    },\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function () {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })()\n  };\n\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // `$.Event()` that will trigger validation. eg: `keyup`, `change`...\n    trigger: false,\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function (ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function (ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var ParsleyAbstract = function () {};\n\n  ParsleyAbstract.prototype = {\n    asyncSupport: true, // Deprecated\n\n    actualizeOptions: function () {\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions)\n        this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function (initOptions) {\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i))\n          this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name.\n    // Callback is called with context as the first argument and the `this`.\n    // The context is the current parsley instance, or window.Parsley if global.\n    // A return value of `false` will interrupt the calls\n    on: function (name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead.\n    subscribe: function(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function (name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name.\n    // A return value of `false` interrupts the callback chain.\n    // Returns false if execution was interrupted.\n    trigger: function (name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--; ) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    // Reset UI\n    reset: function () {\n      // Field case: just emit a reset event for UI\n      if ('ParsleyForm' !== this.__class__)\n        return this._trigger('reset');\n\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i]._trigger('reset');\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      if ('ParsleyForm' !== this.__class__) {\n        this.$element.removeData('Parsley');\n        this.$element.removeData('ParsleyFieldMultiple');\n        this._trigger('destroy');\n\n        return;\n      }\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    asyncIsValid: function (group, force) {\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n      return this.whenValid({group, force});\n    },\n\n    _findRelated: function () {\n      return this.options.multiple ?\n        this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\n      : this.$element;\n    }\n  };\n\n  var requirementConverters = {\n    string: function(string) {\n      return string;\n    },\n    integer: function(string) {\n      if (isNaN(string))\n        throw 'Requirement is not an integer: \"' + string + '\"';\n      return parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(string))\n        throw 'Requirement is not a number: \"' + string + '\"';\n      return parseFloat(string);\n    },\n    reference: function(string) { // Unused for now\n      var result = $(string);\n      if (result.length === 0)\n        throw 'No such reference: \"' + string + '\"';\n      return result;\n    },\n    boolean: function(string) {\n      return string !== 'false';\n    },\n    object: function(string) {\n      return ParsleyUtils__default.deserializeValue(string);\n    },\n    regexp: function(regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        regexp = '^' + regexp + '$';\n      }\n      return new RegExp(regexp, flags);\n    }\n  };\n\n  var convertArrayRequirement = function(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m)\n      throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\n    if (values.length !== length)\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertRequirement = function(requirementType, string) {\n    var converter = requirementConverters[requirementType || 'string'];\n    if (!converter)\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    return converter(string);\n  };\n\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value)\n          value = convertRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = convertRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var ParsleyValidator = function(spec) {\n    $.extend(true, this, spec);\n  };\n\n  ParsleyValidator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function(value, requirementFirstArg) {\n      if (this.fn) { // Legacy style validator\n\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n        return this.fn.call(this, value, requirementFirstArg);\n      }\n\n      if ($.isArray(value)) {\n        if (!this.validateMultiple)\n          throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple(...arguments);\n      } else {\n        if (this.validateNumber) {\n          if (isNaN(value))\n            return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber(...arguments);\n        }\n        if (this.validateString) {\n          return this.validateString(...arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return $.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if ($.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++)\n          values[i] = convertRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [convertRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ParsleyValidatorRegistry = function (validators, catalog) {\n    this.__class__ = 'ParsleyValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeRegexes =  {\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    url: new RegExp(\n        \"^\" +\n          // protocol identifier\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n          // user:pass authentication\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n          \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n          \"|\" +\n            // host name\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n          \")\" +\n          // port number\n          \"(?::\\\\d{2,5})?\" +\n          // resource path\n          \"(?:/\\\\S*)?\" +\n        \"$\", 'i'\n      )\n  };\n  typeRegexes.range = typeRegexes.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = num => {\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { return 0; }\n    return Math.max(\n         0,\n         // Number of digits right of decimal point.\n         (match[1] ? match[1].length : 0) -\n         // Adjust for scientific notation.\n         (match[2] ? +match[2] : 0));\n  };\n\n  ParsleyValidatorRegistry.prototype = {\n    init: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = $.extend({}, this.validators);\n\n      for (var name in validators)\n        this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n      if ('undefined' === typeof this.catalog[locale])\n        throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function (locale, messages, set) {\n      if ('object' === typeof messages)\n        this.catalog[locale] = messages;\n\n      if (true === set)\n        return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function (locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale])\n        this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n        this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function (name, arg1, arg2) {\n      if (this.validators[name])\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');\n      else if (ParsleyDefaults.hasOwnProperty(name)) {\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator(...arguments);\n    },\n\n    updateValidator: function (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator(...arguments);\n      }\n      return this._setValidator(this, arguments);\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[name])\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function (name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new ParsleyValidator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {})\n        this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function (constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function (string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters)\n          string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function(values) {\n          return values.length > 0;\n        },\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function(value, type, {step = '1', base = 0} = {}) {\n          var regex = typeRegexes[type];\n          if (!regex) {\n            throw new Error('validator type `' + type + '` is not supported');\n          }\n          if (!regex.test(value))\n            return false;\n          if ('number' === type) {\n            if (!/^any$/i.test(step || '')) {\n              var nb = Number(value);\n              // Be careful of rounding errors by using integers.\n              var mul = Math.pow(10, Math.max(decimalPlaces(step), decimalPlaces(base)));\n              if ((nb * mul - base * mul) % (step * mul) != 0)\n                return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          '': 'string',\n          step: 'string',\n          base: 'number'\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function (value, requirement) {\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function (value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function (value, min, max) {\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function (values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: {\n        validateNumber: function (value, requirement) {\n          return value >= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      max: {\n        validateNumber: function (value, requirement) {\n          return value <= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      range: {\n        validateNumber: function (value, min, max) {\n          return value >= min && value <= max;\n        },\n        requirementType: ['number', 'number'],\n        priority: 30\n      },\n      equalto: {\n        validateString: function (value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length)\n            return value === $reference.val();\n          else\n            return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var ParsleyUI = function (options) {\n    this.__class__ = 'ParsleyUI';\n  };\n\n  ParsleyUI.prototype = {\n    listen: function () {\n      window.Parsley\n      .on('form:init',       (form ) => { this.setupForm (form ); } )\n      .on('field:init',      (field) => { this.setupField(field); } )\n      .on('field:validated', (field) => { this.reflow    (field); } )\n      .on('form:validated',  (form ) => { this.focus     (form ); } )\n      .on('field:reset',     (field) => { this.reset     (field); } )\n      .on('form:destroy',    (form ) => { this.destroy   (form ); } )\n      .on('field:destroy',   (field) => { this.destroy   (field); } );\n\n      return this;\n    },\n\n    reflow: function (fieldInstance) {\n      // If this field has not an active UI (case for multiples) don't bother doing something\n      if ('undefined' === typeof fieldInstance._ui || false === fieldInstance._ui.active)\n        return;\n\n      // Diff between two validation results\n      var diff = this._diff(fieldInstance.validationResult, fieldInstance._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      fieldInstance._ui.lastValidationResult = fieldInstance.validationResult;\n\n      // Handle valid / invalid / none field class\n      this.manageStatusClass(fieldInstance);\n\n      // Add, remove, updated errors messages\n      this.manageErrorsMessages(fieldInstance, diff);\n\n      // Triggers impl\n      this.actualizeTriggers(fieldInstance);\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && true !== fieldInstance._ui.failedOnce)\n        this.manageFailingFieldTrigger(fieldInstance);\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function (fieldInstance) {\n      // No error message, field is valid\n      if (true === fieldInstance.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i < fieldInstance.validationResult.length; i++)\n        messages.push(fieldInstance.validationResult[i].errorMessage ||\n         this._getErrorMessage(fieldInstance, fieldInstance.validationResult[i].assert));\n\n      return messages;\n    },\n\n    manageStatusClass: function (fieldInstance) {\n      if (fieldInstance.hasConstraints() && fieldInstance.needsValidation() && true === fieldInstance.validationResult)\n        this._successClass(fieldInstance);\n      else if (fieldInstance.validationResult.length > 0)\n        this._errorClass(fieldInstance);\n      else\n        this._resetClass(fieldInstance);\n    },\n\n    manageErrorsMessages: function (fieldInstance, diff) {\n      if ('undefined' !== typeof fieldInstance.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof fieldInstance.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper(fieldInstance);\n\n          if (0 === fieldInstance._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            fieldInstance._ui.$errorsWrapper\n              .append(\n                $(fieldInstance.options.errorTemplate)\n                .addClass('parsley-custom-error-message')\n              );\n\n          return fieldInstance._ui.$errorsWrapper\n            .addClass('filled')\n            .find('.parsley-custom-error-message')\n            .html(fieldInstance.options.errorMessage);\n        }\n\n        return fieldInstance._ui.$errorsWrapper\n          .removeClass('filled')\n          .find('.parsley-custom-error-message')\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++)\n        this.removeError(fieldInstance, diff.removed[i].assert.name, true);\n\n      for (i = 0; i < diff.added.length; i++)\n        this.addError(fieldInstance, diff.added[i].assert.name, diff.added[i].errorMessage, diff.added[i].assert, true);\n\n      for (i = 0; i < diff.kept.length; i++)\n        this.updateError(fieldInstance, diff.kept[i].assert.name, diff.kept[i].errorMessage, diff.kept[i].assert, true);\n    },\n\n    // TODO: strange API here, intuitive for manual usage with addError(pslyInstance, 'foo', 'bar')\n    // but a little bit complex for above internal usage, with forced undefined parameter...\n    addError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n      this._insertErrorWrapper(fieldInstance);\n      fieldInstance._ui.$errorsWrapper\n        .addClass('filled')\n        .append(\n          $(fieldInstance.options.errorTemplate)\n          .addClass('parsley-' + name)\n          .html(message || this._getErrorMessage(fieldInstance, assert))\n        );\n\n      if (true !== doNotUpdateClass)\n        this._errorClass(fieldInstance);\n    },\n\n    // Same as above\n    updateError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n      fieldInstance._ui.$errorsWrapper\n        .addClass('filled')\n        .find('.parsley-' + name)\n        .html(message || this._getErrorMessage(fieldInstance, assert));\n\n      if (true !== doNotUpdateClass)\n        this._errorClass(fieldInstance);\n    },\n\n    // Same as above twice\n    removeError: function (fieldInstance, name, doNotUpdateClass) {\n      fieldInstance._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-' + name)\n        .remove();\n\n      // edge case possible here: remove a standard Parsley error that is still failing in fieldInstance.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (true !== doNotUpdateClass)\n        this.manageStatusClass(fieldInstance);\n    },\n\n    focus: function (formInstance) {\n      formInstance._focusedField = null;\n\n      if (true === formInstance.validationResult || 'none' === formInstance.options.focus)\n        return null;\n\n      for (var i = 0; i < formInstance.fields.length; i++) {\n        var field = formInstance.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          formInstance._focusedField = field.$element;\n          if ('first' === formInstance.options.focus)\n            break;\n        }\n      }\n\n      if (null === formInstance._focusedField)\n        return null;\n\n      return formInstance._focusedField.focus();\n    },\n\n    _getErrorMessage: function (fieldInstance, constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof fieldInstance.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(fieldInstance.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _diff: function (newResult, oldResult, deep) {\n      var added = [];\n      var kept = [];\n\n      for (var i = 0; i < newResult.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < oldResult.length; j++)\n          if (newResult[i].assert.name === oldResult[j].assert.name) {\n            found = true;\n            break;\n          }\n\n        if (found)\n          kept.push(newResult[i]);\n        else\n          added.push(newResult[i]);\n      }\n\n      return {\n        kept: kept,\n        added: added,\n        removed: !deep ? this._diff(oldResult, newResult, true).added : []\n      };\n    },\n\n    setupForm: function (formInstance) {\n      formInstance.$element.on('submit.Parsley', evt => { formInstance.onSubmitValidate(evt); });\n      formInstance.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { formInstance.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === formInstance.options.uiEnabled)\n        return;\n\n      formInstance.$element.attr('novalidate', '');\n    },\n\n    setupField: function (fieldInstance) {\n      var _ui = {active: false};\n\n      // UI could be disabled\n      if (false === fieldInstance.options.uiEnabled)\n        return;\n\n      _ui.active = true;\n\n      // Give field its Parsley id in DOM\n      fieldInstance.$element.attr(fieldInstance.options.namespace + 'id', fieldInstance.__id__);\n\n      /** Generate important UI elements and store them in fieldInstance **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler(fieldInstance);\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (fieldInstance.options.multiple ? 'multiple-' + fieldInstance.options.multiple : fieldInstance.__id__);\n      _ui.$errorsWrapper = $(fieldInstance.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in fieldInstance for later\n      fieldInstance._ui = _ui;\n\n      // Bind triggers first time\n      this.actualizeTriggers(fieldInstance);\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function (fieldInstance) {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof fieldInstance.options.classHandler && $(fieldInstance.options.classHandler).length)\n        return $(fieldInstance.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = fieldInstance.options.classHandler(fieldInstance);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n      if (!fieldInstance.options.multiple || fieldInstance.$element.is('select'))\n        return fieldInstance.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return fieldInstance.$element.parent();\n    },\n\n    _insertErrorWrapper: function (fieldInstance) {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== fieldInstance._ui.$errorsWrapper.parent().length)\n        return fieldInstance._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof fieldInstance.options.errorsContainer) {\n        if ($(fieldInstance.options.errorsContainer).length)\n          return $(fieldInstance.options.errorsContainer).append(fieldInstance._ui.$errorsWrapper);\n        else\n          ParsleyUtils__default.warn('The errors container `' + fieldInstance.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof fieldInstance.options.errorsContainer)\n        $errorsContainer = fieldInstance.options.errorsContainer(fieldInstance);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n        return $errorsContainer.append(fieldInstance._ui.$errorsWrapper);\n\n      var $from = fieldInstance.$element;\n      if (fieldInstance.options.multiple)\n        $from = $from.parent();\n      return $from.after(fieldInstance._ui.$errorsWrapper);\n    },\n\n    actualizeTriggers: function (fieldInstance) {\n      var $toBind = fieldInstance._findRelated();\n\n      // Remove Parsley events already binded on this field\n      $toBind.off('.Parsley');\n\n      // If no trigger is set, all good\n      if (false === fieldInstance.options.trigger)\n        return;\n\n      var triggers = fieldInstance.options.trigger.replace(/^\\s+/g , '').replace(/\\s+$/g , '');\n\n      if ('' === triggers)\n        return;\n\n      $toBind.on(\n        triggers.split(' ').join('.Parsley ') + '.Parsley',\n        event => { this.eventValidate(fieldInstance, event); }\n      );\n    },\n\n    eventValidate: function (field, event) {\n      // For keyup, keypress, keydown... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (/key/.test(event.type))\n        if (!field._ui.validationInformationVisible && field.getValue().length <= field.options.validationThreshold)\n          return;\n\n      field.validate();\n    },\n\n    manageFailingFieldTrigger: function (fieldInstance) {\n      fieldInstance._ui.failedOnce = true;\n\n      // Radio and checkboxes fields must bind every field multiple\n      if (fieldInstance.options.multiple)\n        fieldInstance._findRelated().each(function () {\n          if (!/change/i.test($(this).parsley().options.trigger || ''))\n            $(this).on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n        });\n\n      // Select case\n      if (fieldInstance.$element.is('select'))\n        if (!/change/i.test(fieldInstance.options.trigger || ''))\n          return fieldInstance.$element.on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n\n      // All other inputs fields\n      if (!/keyup/i.test(fieldInstance.options.trigger || ''))\n        return fieldInstance.$element.on('keyup.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n    },\n\n    reset: function (parsleyInstance) {\n      // Reset all event listeners\n      this.actualizeTriggers(parsleyInstance);\n      parsleyInstance.$element.off('.ParsleyFailedOnce');\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof parsleyInstance._ui)\n        return;\n\n      if ('ParsleyForm' === parsleyInstance.__class__)\n        return;\n\n      // Reset all errors' li\n      parsleyInstance._ui.$errorsWrapper\n        .removeClass('filled')\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass(parsleyInstance);\n\n      // Reset validation flags and last validation result\n      parsleyInstance._ui.lastValidationResult = [];\n      parsleyInstance._ui.validationInformationVisible = false;\n      parsleyInstance._ui.failedOnce = false;\n    },\n\n    destroy: function (parsleyInstance) {\n      this.reset(parsleyInstance);\n\n      if ('ParsleyForm' === parsleyInstance.__class__)\n        return;\n\n      if ('undefined' !== typeof parsleyInstance._ui)\n        parsleyInstance._ui.$errorsWrapper.remove();\n\n      delete parsleyInstance._ui;\n    },\n\n    _successClass: function (fieldInstance) {\n      fieldInstance._ui.validationInformationVisible = true;\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.errorClass).addClass(fieldInstance.options.successClass);\n    },\n    _errorClass: function (fieldInstance) {\n      fieldInstance._ui.validationInformationVisible = true;\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).addClass(fieldInstance.options.errorClass);\n    },\n    _resetClass: function (fieldInstance) {\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).removeClass(fieldInstance.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function (element, domOptions, options) {\n    this.__class__ = 'ParsleyForm';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var ParsleyForm__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  ParsleyForm.prototype = {\n    onSubmitValidate: function (event) {\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley)\n        return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      this._$submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n\n      if (this._$submitSource.is('[formnovalidate]')) {\n        this._$submitSource = null;\n        return;\n      }\n\n      // Because some validations might be asynchroneous,\n      // we cancel this submit and will fake it after validation.\n      event.stopImmediatePropagation();\n      event.preventDefault();\n\n      this.whenValidate({event})\n        .done(() => { this._submit(); })\n        .always(() => { this._$submitSource = null; });\n\n      return this;\n    },\n\n    onSubmitButton: function(event) {\n      this._$submitSource = $(event.target);\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function () {\n      if (false === this._trigger('submit'))\n        return;\n      this.$element.find('.parsley_synthetic_submit_button').remove();\n      // Add submit button's data\n      if (this._$submitSource) {\n        $('<input class=\"parsley_synthetic_submit_button\" type=\"hidden\">')\n        .attr('name', this._$submitSource.attr('name'))\n        .attr('value', this._$submitSource.attr('value'))\n        .appendTo(this.$element);\n      }\n      //\n      this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force, event] = arguments;\n        options = {group, force, event};\n      }\n      return ParsleyForm__statusMapping[ this.whenValidate(options).state() ];\n    },\n\n    whenValidate: function ({group, force, event} = {}) {\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent.preventDefault = () => {\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n          this.validationResult = false;\n        };\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before very validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => {\n          return field.whenValidate({force, group});\n        });\n      });\n\n      var promiseBasedOnValidationResult = () => {\n        var r = $.Deferred();\n        if (false === this.validationResult)\n          r.reject();\n        return r.resolve().promise();\n      };\n\n      return $.when(...promises)\n        .done(  () => { this._trigger('success'); })\n        .fail(  () => { this.validationResult = false; this._trigger('error'); })\n        .always(() => { this._trigger('validated'); })\n        .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force] = arguments;\n        options = {group, force};\n      }\n      return ParsleyForm__statusMapping[ this.whenValid(options).state() ];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function ({group, force} = {}) {\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => {\n          return field.whenValid({group, force});\n        });\n      });\n      return $.when(...promises);\n    },\n\n    _refreshFields: function () {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(() => {\n        this.$element\n        .find(this.options.inputs)\n        .not(this.options.excluded)\n        .each((_, element) => {\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\n            if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n              this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n              this.fields.push(fieldInstance);\n            }\n        });\n\n        $(oldFields).not(this.fields).each((_, field) => {\n          field._trigger('reset');\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () { return this; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function (eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  var ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\n    if (!/ParsleyField/.test(parsleyField.__class__))\n      throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new ParsleyValidator(validatorSpec);\n\n    $.extend(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n      isDomConstraint: true === isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  ConstraintFactory.prototype = {\n    validate: function(value, instance) {\n      var args = this.requirementList.slice(0); // Make copy\n      args.unshift(value);\n      args.push(instance);\n      return this.validator.validate.apply(this.validator, args);\n    },\n\n    _parseRequirements: function(options) {\n      this.requirementList = this.validator.parseRequirements(this.requirements, key => {\n        return options[this.name + capitalize(key)];\n      });\n    }\n  };\n\n  var ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'ParsleyField';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = [];\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  ParsleyField.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n        options = {options};\n      }\n      var promise = this.whenValidate(options);\n      if (!promise)  // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case 'pending': return null;\n        case 'resolved': return true;\n        case 'rejected': return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function ({force, group} =  {}) {\n      // do not validate a field if not the same as given validation group\n      this.refreshConstraints();\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid({force, value: this.value, _refreshed: true})\n        .done(() =>   { this._trigger('success'); })\n        .fail(() =>   { this._trigger('error'); })\n        .always(() => { this._trigger('validated'); });\n    },\n\n    hasConstraints: function () {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function (value) {\n      if ('undefined' === typeof value)\n        value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    _isInGroup: function (group) {\n      if ($.isArray(this.options.group))\n        return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n        var [force, value] = arguments;\n        options = {force, value};\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed)\n        this.refreshConstraints();\n      // do not validate a field if not the same as given validation group\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\n      if ('undefined' === typeof value || null === value)\n        value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force)\n        return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints) => {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = $.when(\n          ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\n        );\n        promises.push(promise);\n        if (promise.state() === 'rejected')\n          return false; // Interrupt processing if a group has already failed\n      });\n      return $.when.apply($, promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function(value, constraint) {\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result)\n        result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return $.when(result).fail(errorMessage => {\n        if (true === this.validationResult)\n          this.validationResult = [];\n        this.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function () {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        value = this.options.value;\n      else\n        value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value)\n        return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function () {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name])\n          this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n      for (var i = 0; i < this.constraints.length; i++)\n        if (name === this.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          break;\n        }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function (name, parameters, priority) {\n      return this.removeConstraint(name)\n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function () {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          constraints.push(this.constraints[i]);\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options)\n        this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\n      if (this.$element.hasClass('required') || this.$element.attr('required'))\n        this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if ('string' === typeof this.$element.attr('pattern'))\n        this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n      // range\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\n        this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n      // HTML5 min\n      else if ('undefined' !== typeof this.$element.attr('min'))\n        this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n      // HTML5 max\n      else if ('undefined' !== typeof this.$element.attr('max'))\n        this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n\n      // length\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\n        this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if ('undefined' !== typeof this.$element.attr('minlength'))\n        this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n      // HTML5 maxlength\n      else if ('undefined' !== typeof this.$element.attr('maxlength'))\n        this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n\n      // html5 types\n      var type = this.$element.attr('type');\n\n      if ('undefined' === typeof type)\n        return this;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        return this.addConstraint('type', ['number', {\n          step: this.$element.attr('step'),\n          base: this.$element.attr('min') || this.$element.attr('value')\n        }], undefined, true);\n      // Regular other HTML5 supported types\n      } else if (/^(email|url|range)$/i.test(type)) {\n        return this.addConstraint('type', type, undefined, true);\n      }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n      if ('undefined' === typeof this.constraintsByName.required)\n        return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function (eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function (value) {\n      if (true === this.options.trimValue)\n        ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, ' ');\n\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n        value = ParsleyUtils__default.trimString(value);\n\n      return value;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function () {\n      if (false === this.options.priorityEnabled)\n        return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p])\n          groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function () {\n    this.__class__ = 'ParsleyFieldMultiple';\n  };\n\n  ParsleyMultiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function ($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `ParsleyField.refreshConstraints()`\n    refreshConstraints: function () {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.$element.is('select')) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++)\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `ParsleyField.getValue()`\n    getValue: function () {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        return this.options.value;\n\n      // Radio input case\n      if (this.$element.is('input[type=radio]'))\n        return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (this.$element.is('input[type=checkbox]')) {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n\n      // Select multiple case\n      if (this.$element.is('select') && null === this.$element.val())\n        return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function () {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var ParsleyFactory = function (element, options, parsleyFormInstance) {\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length)\n      throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\n      throw new Error('Parent instance must be a ParsleyForm instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  ParsleyFactory.prototype = {\n    init: function (options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '@@version';\n      this.__id__ = ParsleyUtils__default.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.$element.is('form') || (ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n        return this.bind('parsleyForm');\n\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function () {\n      return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function () {\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      if (this.options.multiple)\n        ; // We already have our 'multiple' identifier\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\n        this.options.multiple = name = this.$element.attr('name');\n      else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\n        this.options.multiple = this.$element.attr('id');\n\n      // Special select multiple input\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n        ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n        return this;\n      }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if ('undefined' !== typeof name) {\n        $('input[name=\"' + name + '\"]').each((i, input) => {\n          if ($(input).is('input[type=radio], input[type=checkbox]'))\n            $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('ParsleyFieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n    bind: function (type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(\n            new ParsleyForm(this.$element, this.domOptions, this.options),\n            window.ParsleyExtend\n          )._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\n            window.ParsleyExtend\n          );\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\n            new ParsleyMultiple(),\n            window.ParsleyExtend\n          )._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple)\n        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = $.extend(new ParsleyAbstract(), {\n      $element: $(document),\n      actualizeOptions: null,\n      _resetOptions: null,\n      Factory: ParsleyFactory,\n      version: '@@version'\n    });\n\n  // Supplement ParsleyField and Form with ParsleyAbstract\n  // This way, the constructors will have access to those methods\n  $.extend(parsley_field.prototype, ParsleyAbstract.prototype);\n  $.extend(ParsleyForm.prototype, ParsleyAbstract.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\n\n      return;\n    }\n\n    return new ParsleyFactory(this, options);\n  };\n\n  // ### ParsleyField and ParsleyForm extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend)\n    window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  window.ParsleyUtils = ParsleyUtils__default;\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = $.proxy(registry, method);\n    window.ParsleyValidator[method] = function () {\n      ParsleyUtils__default.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n      return window.Parsley[method](...arguments);\n    };\n  });\n\n  // ### ParsleyUI\n  // UI is a separate class that only listens to some events and then modifies the DOM accordingly\n  // Could be overriden by defining a `window.ParsleyConfig.ParsleyUI` appropriate class (with `listen()` method basically)\n  window.ParsleyUI = 'function' === typeof window.ParsleyConfig.ParsleyUI ?\n    new window.ParsleyConfig.ParsleyUI().listen() : new ParsleyUI().listen();\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length)\n        $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function () {\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\n      throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\n      throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof ParsleyForm);\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function (xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function (value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator])\n        throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache)\n        Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function () {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  window.ParsleyExtend.addAsyncValidator = function () {\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email:        \"This value should be a valid email.\",\n      url:          \"This value should be a valid url.\",\n      number:       \"This value should be a valid number.\",\n      integer:      \"This value should be a valid integer.\",\n      digits:       \"This value should be digits.\",\n      alphanum:     \"This value should be alphanumeric.\"\n    },\n    notblank:       \"This value should not be blank.\",\n    required:       \"This value is required.\",\n    pattern:        \"This value seems to be invalid.\",\n    min:            \"This value should be greater than or equal to %s.\",\n    max:            \"This value should be lower than or equal to %s.\",\n    range:          \"This value should be between %s and %s.\",\n    minlength:      \"This value is too short. It should have %s characters or more.\",\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck:       \"You must select at least %s choices.\",\n    maxcheck:       \"You must select %s choices or fewer.\",\n    check:          \"You must select between %s and %s choices.\",\n    equalto:        \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\nimport ParsleyField from './field';\nimport ParsleyForm from './form';\nimport ParsleyUtils from './utils';\n\nvar o = $({});\nvar deprecated = function () {\n  ParsleyUtils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n};\n\n// Returns an event handler that calls `fn` with the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  return fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = 'parsley:';\n// Converts 'parsley:form:validate' into 'form:validate'\nfunction eventName(name) {\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.listen = function (name, callback) {\n  var context;\n  deprecated();\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n    context = arguments[1];\n    callback = arguments[2];\n  }\n\n  if ('function' !== typeof callback)\n    throw new Error('Wrong parameters');\n\n  window.Parsley.on(eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instance, name, fn) {\n  deprecated();\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\n    throw new Error('Must give Parsley instance');\n\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong parameters');\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubscribe = function (name, fn) {\n  deprecated();\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong arguments');\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = function (instance, name) {\n  deprecated();\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\n    throw new Error('Must give Parsley instance');\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name) {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $('form,input,textarea,select').each(function () {\n    var instance = $(this).data('Parsley');\n    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n// $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, instance) {\n  deprecated();\n  var instanceGiven = (instance instanceof ParsleyField) || (instance instanceof ParsleyForm);\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven) {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexport default {};\n","import $ from 'jquery';\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar ParsleyUtils = {\n  // Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: function ($element, namespace, obj) {\n    var i;\n    var attribute;\n    var attributes;\n    var regex = new RegExp('^' + namespace, 'i');\n\n    if ('undefined' === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties. This won't affect prototype's values\n      for (i in obj) {\n        if (obj.hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\n      return obj;\n\n    attributes = $element[0].attributes;\n    for (i = attributes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function ($element, namespace, checkAttr) {\n    return $element.is('[' + namespace + checkAttr + ']');\n  },\n\n  setAttr: function ($element, namespace, attr, value) {\n    $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  generateID: function () {\n    return '' + globalID++;\n  },\n\n  /** Third party functions **/\n  // Zepto deserialize function\n  deserializeValue: function (value) {\n    var num;\n\n    try {\n      return value ?\n        value == \"true\" ||\n        (value == \"false\" ? false :\n        value == \"null\" ? null :\n        !isNaN(num = Number(value)) ? num :\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n        value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n    return str.replace(/::/g, '/')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n      .replace(/_/g, '-')\n      .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console && 'function' === typeof window.console.warn)\n      window.console.warn(...arguments);\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pastWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetWarnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(string) {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  },\n\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n  objectCreate: Object.create || (function () {\n    var Object = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw Error('Second argument not supported');\n      }\n      if (typeof prototype != 'object') {\n        throw TypeError('Argument must be an object');\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })()\n};\n\nexport default ParsleyUtils;\n","// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\nvar ParsleyDefaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: 'data-parsley-',\n\n  // Supported inputs by default\n  inputs: 'input, textarea, select',\n\n  // Excluded inputs by default\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. 'first'|'last'|'none'\n  focus: 'first',\n\n  // `$.Event()` that will trigger validation. eg: `keyup`, `change`...\n  trigger: false,\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // Same for success validation\n  successClass: 'parsley-success',\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  classHandler: function (ParsleyField) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  errorsContainer: function (ParsleyField) {},\n\n  // ul elem that would receive errors' list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n  // li elem that would receive error message\n  errorTemplate: '<li></li>'\n};\n\nexport default ParsleyDefaults;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar ParsleyAbstract = function () {};\n\nParsleyAbstract.prototype = {\n  asyncSupport: true, // Deprecated\n\n  actualizeOptions: function () {\n    ParsleyUtils.attr(this.$element, this.options.namespace, this.domOptions);\n    if (this.parent && this.parent.actualizeOptions)\n      this.parent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (initOptions) {\n    this.domOptions = ParsleyUtils.objectCreate(this.parent.options);\n    this.options = ParsleyUtils.objectCreate(this.domOptions);\n    // Shallow copy of ownProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOptions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callback for the given event name.\n  // Callback is called with context as the first argument and the `this`.\n  // The context is the current parsley instance, or window.Parsley if global.\n  // A return value of `false` will interrupt the calls\n  on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    var queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(fn);\n\n    return this;\n  },\n\n  // Deprecated. Use `on` instead.\n  subscribe: function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  // Unregister a callback (or all if none is given) for the given event name\n  off: function (name, fn) {\n    var queue = this._listeners && this._listeners[name];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n  },\n\n  // Deprecated. Use `off`\n  unsubscribe: function(name, fn) {\n    $.unsubscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the given name.\n  // A return value of `false` interrupts the callback chain.\n  // Returns false if execution was interrupted.\n  trigger: function (name, target, extraArg) {\n    target = target || this;\n    var queue = this._listeners && this._listeners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n      for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, target, extraArg);\n        if (result === false) return result;\n      }\n    }\n    if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);\n    }\n    return true;\n  },\n\n  // Reset UI\n  reset: function () {\n    // Field case: just emit a reset event for UI\n    if ('ParsleyForm' !== this.__class__)\n      return this._trigger('reset');\n\n    // Form case: emit a reset event for each field\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i]._trigger('reset');\n\n    this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    if ('ParsleyForm' !== this.__class__) {\n      this.$element.removeData('Parsley');\n      this.$element.removeData('ParsleyFieldMultiple');\n      this._trigger('destroy');\n\n      return;\n    }\n\n    // Form case: destroy all its fields and then destroy stored instance\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].destroy();\n\n    this.$element.removeData('Parsley');\n    this._trigger('destroy');\n  },\n\n  asyncIsValid: function (group, force) {\n    ParsleyUtils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n    return this.whenValid({group, force});\n  },\n\n  _findRelated: function () {\n    return this.options.multiple ?\n      this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\n    : this.$element;\n  }\n};\n\nexport default ParsleyAbstract;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar requirementConverters = {\n  string: function(string) {\n    return string;\n  },\n  integer: function(string) {\n    if (isNaN(string))\n      throw 'Requirement is not an integer: \"' + string + '\"';\n    return parseInt(string, 10);\n  },\n  number: function(string) {\n    if (isNaN(string))\n      throw 'Requirement is not a number: \"' + string + '\"';\n    return parseFloat(string);\n  },\n  reference: function(string) { // Unused for now\n    var result = $(string);\n    if (result.length === 0)\n      throw 'No such reference: \"' + string + '\"';\n    return result;\n  },\n  boolean: function(string) {\n    return string !== 'false';\n  },\n  object: function(string) {\n    return ParsleyUtils.deserializeValue(string);\n  },\n  regexp: function(regexp) {\n    var flags = '';\n\n    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n    if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n      // Replace the regexp literal string with the first match group: ([gimy]*)\n      // If no flag is present, this will be a blank string\n      flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n      // Again, replace the regexp literal string with the first match group:\n      // everything excluding the opening and closing slashes and the flags\n      regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n    } else {\n      // Anchor regexp:\n      regexp = '^' + regexp + '$';\n    }\n    return new RegExp(regexp, flags);\n  }\n};\n\nvar convertArrayRequirement = function(string, length) {\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n  if (!m)\n    throw 'Requirement is not an array: \"' + string + '\"';\n  var values = m[1].split(',').map(ParsleyUtils.trimString);\n  if (values.length !== length)\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n  return values;\n};\n\nvar convertRequirement = function(requirementType, string) {\n  var converter = requirementConverters[requirementType || 'string'];\n  if (!converter)\n    throw 'Unknown requirement specification: \"' + requirementType + '\"';\n  return converter(string);\n};\n\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n  var main = null;\n  var extra = {};\n  for (var key in requirementSpec) {\n    if (key) {\n      var value = extraOptionReader(key);\n      if ('string' === typeof value)\n        value = convertRequirement(requirementSpec[key], value);\n      extra[key] = value;\n    } else {\n      main = convertRequirement(requirementSpec[key], string);\n    }\n  }\n  return [main, extra];\n};\n\n// A Validator needs to implement the methods `validate` and `parseRequirements`\n\nvar ParsleyValidator = function(spec) {\n  $.extend(true, this, spec);\n};\n\nParsleyValidator.prototype = {\n  // Returns `true` iff the given `value` is valid according the given requirements.\n  validate: function(value, requirementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n      return this.fn.call(this, value, requirementFirstArg);\n    }\n\n    if ($.isArray(value)) {\n      if (!this.validateMultiple)\n        throw 'Validator `' + this.name + '` does not handle multiple values';\n      return this.validateMultiple(...arguments);\n    } else {\n      if (this.validateNumber) {\n        if (isNaN(value))\n          return false;\n        arguments[0] = parseFloat(arguments[0]);\n        return this.validateNumber(...arguments);\n      }\n      if (this.validateString) {\n        return this.validateString(...arguments);\n      }\n      throw 'Validator `' + this.name + '` only handles multiple values';\n    }\n  },\n\n  // Parses `requirements` into an array of arguments,\n  // according to `this.requirementType`\n  parseRequirements: function(requirements, extraOptionReader) {\n    if ('string' !== typeof requirements) {\n      // Assume requirement already parsed\n      // but make sure we return an array\n      return $.isArray(requirements) ? requirements : [requirements];\n    }\n    var type = this.requirementType;\n    if ($.isArray(type)) {\n      var values = convertArrayRequirement(requirements, type.length);\n      for (var i = 0; i < values.length; i++)\n        values[i] = convertRequirement(type[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n    } else {\n      return [convertRequirement(type, requirements)];\n    }\n  },\n  // Defaults:\n  requirementType: 'string',\n\n  priority: 2\n\n};\n\nexport default ParsleyValidator;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyDefaults from './defaults';\nimport ParsleyValidator from './validator';\n\nvar ParsleyValidatorRegistry = function (validators, catalog) {\n  this.__class__ = 'ParsleyValidatorRegistry';\n\n  // Default Parsley locale is en\n  this.locale = 'en';\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeRegexes =  {\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n  integer: /^-?\\d+$/,\n\n  digits: /^\\d+$/,\n\n  alphanum: /^\\w+$/i,\n\n  url: new RegExp(\n      \"^\" +\n        // protocol identifier\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\" +\n          // IP address exclusion\n          // private & local networks\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          // TLD identifier\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:/\\\\S*)?\" +\n      \"$\", 'i'\n    )\n};\ntypeRegexes.range = typeRegexes.number;\n\n// See http://stackoverflow.com/a/10454560/8279\nvar decimalPlaces = num => {\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) { return 0; }\n  return Math.max(\n       0,\n       // Number of digits right of decimal point.\n       (match[1] ? match[1].length : 0) -\n       // Adjust for scientific notation.\n       (match[2] ? +match[2] : 0));\n};\n\nParsleyValidatorRegistry.prototype = {\n  init: function (validators, catalog) {\n    this.catalog = catalog;\n    // Copy prototype's validators:\n    this.validators = $.extend({}, this.validators);\n\n    for (var name in validators)\n      this.addValidator(name, validators[name].fn, validators[name].priority);\n\n    window.Parsley.trigger('parsley:validator:init');\n  },\n\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n  setLocale: function (locale) {\n    if ('undefined' === typeof this.catalog[locale])\n      throw new Error(locale + ' is not available in the catalog');\n\n    this.locale = locale;\n\n    return this;\n  },\n\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n  addCatalog: function (locale, messages, set) {\n    if ('object' === typeof messages)\n      this.catalog[locale] = messages;\n\n    if (true === set)\n      return this.setLocale(locale);\n\n    return this;\n  },\n\n  // Add a specific message for a given constraint in a given locale\n  addMessage: function (locale, name, message) {\n    if ('undefined' === typeof this.catalog[locale])\n      this.catalog[locale] = {};\n\n    this.catalog[locale][name] = message;\n\n    return this;\n  },\n\n  // Add messages for a given locale\n  addMessages: function (locale, nameMessageObject) {\n    for (var name in nameMessageObject)\n      this.addMessage(locale, name, nameMessageObject[name]);\n\n    return this;\n  },\n\n  // Add a new validator\n  //\n  //    addValidator('custom', {\n  //        requirementType: ['integer', 'integer'],\n  //        validateString: function(value, from, to) {},\n  //        priority: 22,\n  //        messages: {\n  //          en: \"Hey, that's no good\",\n  //          fr: \"Aye aye, pas bon du tout\",\n  //        }\n  //    })\n  //\n  // Old API was addValidator(name, function, priority)\n  //\n  addValidator: function (name, arg1, arg2) {\n    if (this.validators[name])\n      ParsleyUtils.warn('Validator \"' + name + '\" is already defined.');\n    else if (ParsleyDefaults.hasOwnProperty(name)) {\n      ParsleyUtils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n      return;\n    }\n    return this._setValidator(...arguments);\n  },\n\n  updateValidator: function (name, arg1, arg2) {\n    if (!this.validators[name]) {\n      ParsleyUtils.warn('Validator \"' + name + '\" is not already defined.');\n      return this.addValidator(...arguments);\n    }\n    return this._setValidator(this, arguments);\n  },\n\n  removeValidator: function (name) {\n    if (!this.validators[name])\n      ParsleyUtils.warn('Validator \"' + name + '\" is not defined.');\n\n    delete this.validators[name];\n\n    return this;\n  },\n\n  _setValidator: function (name, validator, priority) {\n    if ('object' !== typeof validator) {\n      // Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator,\n        priority: priority\n      };\n    }\n    if (!validator.validate) {\n      validator = new ParsleyValidator(validator);\n    }\n    this.validators[name] = validator;\n\n    for (var locale in validator.messages || {})\n      this.addMessage(locale, name, validator.messages[locale]);\n\n    return this;\n  },\n\n  getErrorMessage: function (constraint) {\n    var message;\n\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\n    if ('type' === constraint.name) {\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\n      message = typeMessages[constraint.requirements];\n    } else\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n  },\n\n  // Kind of light `sprintf()` implementation\n  formatMessage: function (string, parameters) {\n    if ('object' === typeof parameters) {\n      for (var i in parameters)\n        string = this.formatMessage(string, parameters[i]);\n\n      return string;\n    }\n\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n  },\n\n  // Here is the Parsley default validators list.\n  // A validator is an object with the following key values:\n  //  - priority: an integer\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n  // Alternatively, a validator can be a function that returns such an object\n  //\n  validators: {\n    notblank: {\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 2\n    },\n    required: {\n      validateMultiple: function(values) {\n        return values.length > 0;\n      },\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 512\n    },\n    type: {\n      validateString: function(value, type, {step = '1', base = 0} = {}) {\n        var regex = typeRegexes[type];\n        if (!regex) {\n          throw new Error('validator type `' + type + '` is not supported');\n        }\n        if (!regex.test(value))\n          return false;\n        if ('number' === type) {\n          if (!/^any$/i.test(step || '')) {\n            var nb = Number(value);\n            // Be careful of rounding errors by using integers.\n            var mul = Math.pow(10, Math.max(decimalPlaces(step), decimalPlaces(base)));\n            if ((nb * mul - base * mul) % (step * mul) != 0)\n              return false;\n          }\n        }\n        return true;\n      },\n      requirementType: {\n        '': 'string',\n        step: 'string',\n        base: 'number'\n      },\n      priority: 256\n    },\n    pattern: {\n      validateString: function(value, regexp) {\n        return regexp.test(value);\n      },\n      requirementType: 'regexp',\n      priority: 64\n    },\n    minlength: {\n      validateString: function (value, requirement) {\n        return value.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxlength: {\n      validateString: function (value, requirement) {\n        return value.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    length: {\n      validateString: function (value, min, max) {\n        return value.length >= min && value.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    mincheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxcheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    check: {\n      validateMultiple: function (values, min, max) {\n        return values.length >= min && values.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    min: {\n      validateNumber: function (value, requirement) {\n        return value >= requirement;\n      },\n      requirementType: 'number',\n      priority: 30\n    },\n    max: {\n      validateNumber: function (value, requirement) {\n        return value <= requirement;\n      },\n      requirementType: 'number',\n      priority: 30\n    },\n    range: {\n      validateNumber: function (value, min, max) {\n        return value >= min && value <= max;\n      },\n      requirementType: ['number', 'number'],\n      priority: 30\n    },\n    equalto: {\n      validateString: function (value, refOrValue) {\n        var $reference = $(refOrValue);\n        if ($reference.length)\n          return value === $reference.val();\n        else\n          return value === refOrValue;\n      },\n      priority: 256\n    }\n  }\n};\n\nexport default ParsleyValidatorRegistry;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar ParsleyUI = function (options) {\n  this.__class__ = 'ParsleyUI';\n};\n\nParsleyUI.prototype = {\n  listen: function () {\n    window.Parsley\n    .on('form:init',       (form ) => { this.setupForm (form ); } )\n    .on('field:init',      (field) => { this.setupField(field); } )\n    .on('field:validated', (field) => { this.reflow    (field); } )\n    .on('form:validated',  (form ) => { this.focus     (form ); } )\n    .on('field:reset',     (field) => { this.reset     (field); } )\n    .on('form:destroy',    (form ) => { this.destroy   (form ); } )\n    .on('field:destroy',   (field) => { this.destroy   (field); } );\n\n    return this;\n  },\n\n  reflow: function (fieldInstance) {\n    // If this field has not an active UI (case for multiples) don't bother doing something\n    if ('undefined' === typeof fieldInstance._ui || false === fieldInstance._ui.active)\n      return;\n\n    // Diff between two validation results\n    var diff = this._diff(fieldInstance.validationResult, fieldInstance._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    fieldInstance._ui.lastValidationResult = fieldInstance.validationResult;\n\n    // Handle valid / invalid / none field class\n    this.manageStatusClass(fieldInstance);\n\n    // Add, remove, updated errors messages\n    this.manageErrorsMessages(fieldInstance, diff);\n\n    // Triggers impl\n    this.actualizeTriggers(fieldInstance);\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) && true !== fieldInstance._ui.failedOnce)\n      this.manageFailingFieldTrigger(fieldInstance);\n  },\n\n  // Returns an array of field's error message(s)\n  getErrorsMessages: function (fieldInstance) {\n    // No error message, field is valid\n    if (true === fieldInstance.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i < fieldInstance.validationResult.length; i++)\n      messages.push(fieldInstance.validationResult[i].errorMessage ||\n       this._getErrorMessage(fieldInstance, fieldInstance.validationResult[i].assert));\n\n    return messages;\n  },\n\n  manageStatusClass: function (fieldInstance) {\n    if (fieldInstance.hasConstraints() && fieldInstance.needsValidation() && true === fieldInstance.validationResult)\n      this._successClass(fieldInstance);\n    else if (fieldInstance.validationResult.length > 0)\n      this._errorClass(fieldInstance);\n    else\n      this._resetClass(fieldInstance);\n  },\n\n  manageErrorsMessages: function (fieldInstance, diff) {\n    if ('undefined' !== typeof fieldInstance.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if ('undefined' !== typeof fieldInstance.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper(fieldInstance);\n\n        if (0 === fieldInstance._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n          fieldInstance._ui.$errorsWrapper\n            .append(\n              $(fieldInstance.options.errorTemplate)\n              .addClass('parsley-custom-error-message')\n            );\n\n        return fieldInstance._ui.$errorsWrapper\n          .addClass('filled')\n          .find('.parsley-custom-error-message')\n          .html(fieldInstance.options.errorMessage);\n      }\n\n      return fieldInstance._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-custom-error-message')\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i < diff.removed.length; i++)\n      this.removeError(fieldInstance, diff.removed[i].assert.name, true);\n\n    for (i = 0; i < diff.added.length; i++)\n      this.addError(fieldInstance, diff.added[i].assert.name, diff.added[i].errorMessage, diff.added[i].assert, true);\n\n    for (i = 0; i < diff.kept.length; i++)\n      this.updateError(fieldInstance, diff.kept[i].assert.name, diff.kept[i].errorMessage, diff.kept[i].assert, true);\n  },\n\n  // TODO: strange API here, intuitive for manual usage with addError(pslyInstance, 'foo', 'bar')\n  // but a little bit complex for above internal usage, with forced undefined parameter...\n  addError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n    this._insertErrorWrapper(fieldInstance);\n    fieldInstance._ui.$errorsWrapper\n      .addClass('filled')\n      .append(\n        $(fieldInstance.options.errorTemplate)\n        .addClass('parsley-' + name)\n        .html(message || this._getErrorMessage(fieldInstance, assert))\n      );\n\n    if (true !== doNotUpdateClass)\n      this._errorClass(fieldInstance);\n  },\n\n  // Same as above\n  updateError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n    fieldInstance._ui.$errorsWrapper\n      .addClass('filled')\n      .find('.parsley-' + name)\n      .html(message || this._getErrorMessage(fieldInstance, assert));\n\n    if (true !== doNotUpdateClass)\n      this._errorClass(fieldInstance);\n  },\n\n  // Same as above twice\n  removeError: function (fieldInstance, name, doNotUpdateClass) {\n    fieldInstance._ui.$errorsWrapper\n      .removeClass('filled')\n      .find('.parsley-' + name)\n      .remove();\n\n    // edge case possible here: remove a standard Parsley error that is still failing in fieldInstance.validationResult\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n    if (true !== doNotUpdateClass)\n      this.manageStatusClass(fieldInstance);\n  },\n\n  focus: function (formInstance) {\n    formInstance._focusedField = null;\n\n    if (true === formInstance.validationResult || 'none' === formInstance.options.focus)\n      return null;\n\n    for (var i = 0; i < formInstance.fields.length; i++) {\n      var field = formInstance.fields[i];\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n        formInstance._focusedField = field.$element;\n        if ('first' === formInstance.options.focus)\n          break;\n      }\n    }\n\n    if (null === formInstance._focusedField)\n      return null;\n\n    return formInstance._focusedField.focus();\n  },\n\n  _getErrorMessage: function (fieldInstance, constraint) {\n    var customConstraintErrorMessage = constraint.name + 'Message';\n\n    if ('undefined' !== typeof fieldInstance.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(fieldInstance.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _diff: function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? this._diff(oldResult, newResult, true).added : []\n    };\n  },\n\n  setupForm: function (formInstance) {\n    formInstance.$element.on('submit.Parsley', evt => { formInstance.onSubmitValidate(evt); });\n    formInstance.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { formInstance.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === formInstance.options.uiEnabled)\n      return;\n\n    formInstance.$element.attr('novalidate', '');\n  },\n\n  setupField: function (fieldInstance) {\n    var _ui = {active: false};\n\n    // UI could be disabled\n    if (false === fieldInstance.options.uiEnabled)\n      return;\n\n    _ui.active = true;\n\n    // Give field its Parsley id in DOM\n    fieldInstance.$element.attr(fieldInstance.options.namespace + 'id', fieldInstance.__id__);\n\n    /** Generate important UI elements and store them in fieldInstance **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler(fieldInstance);\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = 'parsley-id-' + (fieldInstance.options.multiple ? 'multiple-' + fieldInstance.options.multiple : fieldInstance.__id__);\n    _ui.$errorsWrapper = $(fieldInstance.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in fieldInstance for later\n    fieldInstance._ui = _ui;\n\n    // Bind triggers first time\n    this.actualizeTriggers(fieldInstance);\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function (fieldInstance) {\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n    if ('string' === typeof fieldInstance.options.classHandler && $(fieldInstance.options.classHandler).length)\n      return $(fieldInstance.options.classHandler);\n\n    // Class handled could also be determined by function given in Parsley options\n    var $handler = fieldInstance.options.classHandler(fieldInstance);\n\n    // If this function returned a valid existing DOM element, go for it\n    if ('undefined' !== typeof $handler && $handler.length)\n      return $handler;\n\n    // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n    if (!fieldInstance.options.multiple || fieldInstance.$element.is('select'))\n      return fieldInstance.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return fieldInstance.$element.parent();\n  },\n\n  _insertErrorWrapper: function (fieldInstance) {\n    var $errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== fieldInstance._ui.$errorsWrapper.parent().length)\n      return fieldInstance._ui.$errorsWrapper.parent();\n\n    if ('string' === typeof fieldInstance.options.errorsContainer) {\n      if ($(fieldInstance.options.errorsContainer).length)\n        return $(fieldInstance.options.errorsContainer).append(fieldInstance._ui.$errorsWrapper);\n      else\n        ParsleyUtils.warn('The errors container `' + fieldInstance.options.errorsContainer + '` does not exist in DOM');\n    } else if ('function' === typeof fieldInstance.options.errorsContainer)\n      $errorsContainer = fieldInstance.options.errorsContainer(fieldInstance);\n\n    if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n      return $errorsContainer.append(fieldInstance._ui.$errorsWrapper);\n\n    var $from = fieldInstance.$element;\n    if (fieldInstance.options.multiple)\n      $from = $from.parent();\n    return $from.after(fieldInstance._ui.$errorsWrapper);\n  },\n\n  actualizeTriggers: function (fieldInstance) {\n    var $toBind = fieldInstance._findRelated();\n\n    // Remove Parsley events already binded on this field\n    $toBind.off('.Parsley');\n\n    // If no trigger is set, all good\n    if (false === fieldInstance.options.trigger)\n      return;\n\n    var triggers = fieldInstance.options.trigger.replace(/^\\s+/g , '').replace(/\\s+$/g , '');\n\n    if ('' === triggers)\n      return;\n\n    $toBind.on(\n      triggers.split(' ').join('.Parsley ') + '.Parsley',\n      event => { this.eventValidate(fieldInstance, event); }\n    );\n  },\n\n  eventValidate: function (field, event) {\n    // For keyup, keypress, keydown... events that could be a little bit obstrusive\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (/key/.test(event.type))\n      if (!field._ui.validationInformationVisible && field.getValue().length <= field.options.validationThreshold)\n        return;\n\n    field.validate();\n  },\n\n  manageFailingFieldTrigger: function (fieldInstance) {\n    fieldInstance._ui.failedOnce = true;\n\n    // Radio and checkboxes fields must bind every field multiple\n    if (fieldInstance.options.multiple)\n      fieldInstance._findRelated().each(function () {\n        if (!/change/i.test($(this).parsley().options.trigger || ''))\n          $(this).on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n      });\n\n    // Select case\n    if (fieldInstance.$element.is('select'))\n      if (!/change/i.test(fieldInstance.options.trigger || ''))\n        return fieldInstance.$element.on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n\n    // All other inputs fields\n    if (!/keyup/i.test(fieldInstance.options.trigger || ''))\n      return fieldInstance.$element.on('keyup.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n  },\n\n  reset: function (parsleyInstance) {\n    // Reset all event listeners\n    this.actualizeTriggers(parsleyInstance);\n    parsleyInstance.$element.off('.ParsleyFailedOnce');\n\n    // Nothing to do if UI never initialized for this field\n    if ('undefined' === typeof parsleyInstance._ui)\n      return;\n\n    if ('ParsleyForm' === parsleyInstance.__class__)\n      return;\n\n    // Reset all errors' li\n    parsleyInstance._ui.$errorsWrapper\n      .removeClass('filled')\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass(parsleyInstance);\n\n    // Reset validation flags and last validation result\n    parsleyInstance._ui.lastValidationResult = [];\n    parsleyInstance._ui.validationInformationVisible = false;\n    parsleyInstance._ui.failedOnce = false;\n  },\n\n  destroy: function (parsleyInstance) {\n    this.reset(parsleyInstance);\n\n    if ('ParsleyForm' === parsleyInstance.__class__)\n      return;\n\n    if ('undefined' !== typeof parsleyInstance._ui)\n      parsleyInstance._ui.$errorsWrapper.remove();\n\n    delete parsleyInstance._ui;\n  },\n\n  _successClass: function (fieldInstance) {\n    fieldInstance._ui.validationInformationVisible = true;\n    fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.errorClass).addClass(fieldInstance.options.successClass);\n  },\n  _errorClass: function (fieldInstance) {\n    fieldInstance._ui.validationInformationVisible = true;\n    fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).addClass(fieldInstance.options.errorClass);\n  },\n  _resetClass: function (fieldInstance) {\n    fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).removeClass(fieldInstance.options.errorClass);\n  }\n};\n\nexport default ParsleyUI;\n","import $ from 'jquery';\nimport ParsleyAbstract from './abstract';\nimport ParsleyUtils from './utils';\n\nvar ParsleyForm = function (element, domOptions, options) {\n  this.__class__ = 'ParsleyForm';\n  this.__id__ = ParsleyUtils.generateID();\n\n  this.$element = $(element);\n  this.domOptions = domOptions;\n  this.options = options;\n  this.parent = window.Parsley;\n\n  this.fields = [];\n  this.validationResult = null;\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nParsleyForm.prototype = {\n  onSubmitValidate: function (event) {\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n    if (true === event.parsley)\n      return;\n\n    // If we didn't come here through a submit button, use the first one in the form\n    this._$submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n\n    if (this._$submitSource.is('[formnovalidate]')) {\n      this._$submitSource = null;\n      return;\n    }\n\n    // Because some validations might be asynchroneous,\n    // we cancel this submit and will fake it after validation.\n    event.stopImmediatePropagation();\n    event.preventDefault();\n\n    this.whenValidate({event})\n      .done(() => { this._submit(); })\n      .always(() => { this._$submitSource = null; });\n\n    return this;\n  },\n\n  onSubmitButton: function(event) {\n    this._$submitSource = $(event.target);\n  },\n  // internal\n  // _submit submits the form, this time without going through the validations.\n  // Care must be taken to \"fake\" the actual submit button being clicked.\n  _submit: function () {\n    if (false === this._trigger('submit'))\n      return;\n    this.$element.find('.parsley_synthetic_submit_button').remove();\n    // Add submit button's data\n    if (this._$submitSource) {\n      $('<input class=\"parsley_synthetic_submit_button\" type=\"hidden\">')\n      .attr('name', this._$submitSource.attr('name'))\n      .attr('value', this._$submitSource.attr('value'))\n      .appendTo(this.$element);\n    }\n    //\n    this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\n  },\n\n  // Performs validation on fields while triggering events.\n  // @returns `true` if all validations succeeds, `false`\n  // if a failure is immediately detected, or `null`\n  // if dependant on a promise.\n  // Consider using `whenValidate` instead.\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force, event] = arguments;\n      options = {group, force, event};\n    }\n    return statusMapping[ this.whenValidate(options).state() ];\n  },\n\n  whenValidate: function ({group, force, event} = {}) {\n    this.submitEvent = event;\n    if (event) {\n      this.submitEvent.preventDefault = () => {\n        ParsleyUtils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n        this.validationResult = false;\n      };\n    }\n    this.validationResult = true;\n\n    // fire validate event to eventually modify things before very validation\n    this._trigger('validate');\n\n    // Refresh form DOM options and form's fields that could have changed\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => {\n        return field.whenValidate({force, group});\n      });\n    });\n\n    var promiseBasedOnValidationResult = () => {\n      var r = $.Deferred();\n      if (false === this.validationResult)\n        r.reject();\n      return r.resolve().promise();\n    };\n\n    return $.when(...promises)\n      .done(  () => { this._trigger('success'); })\n      .fail(  () => { this.validationResult = false; this._trigger('error'); })\n      .always(() => { this._trigger('validated'); })\n      .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\n  },\n\n  // Iterate over refreshed fields, and stop on first failure.\n  // Returns `true` if all fields are valid, `false` if a failure is detected\n  // or `null` if the result depends on an unresolved promise.\n  // Prefer using `whenValid` instead.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force] = arguments;\n      options = {group, force};\n    }\n    return statusMapping[ this.whenValid(options).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.\n  // Returns a promise.\n  // A validation that immediately fails will interrupt the validations.\n  whenValid: function ({group, force} = {}) {\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => {\n        return field.whenValid({group, force});\n      });\n    });\n    return $.when(...promises);\n  },\n\n  _refreshFields: function () {\n    return this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n    var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedById = {};\n\n    this._withoutReactualizingFormOptions(() => {\n      this.$element\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .each((_, element) => {\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n        // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n        if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\n          if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n            this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n            this.fields.push(fieldInstance);\n          }\n      });\n\n      $(oldFields).not(this.fields).each((_, field) => {\n        field._trigger('reset');\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Looping on a form's fields to do validation or similar\n  // will trigger reactualizing options on all of them, which\n  // in turn will reactualize the form's options.\n  // To avoid calling actualizeOptions so many times on the form\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method actualizeOptions on this form while `fn` is called.\n  _withoutReactualizingFormOptions: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n    this.actualizeOptions = function () { return this; };\n    var result = fn();\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff event is not interrupted and default not prevented.\n  _trigger: function (eventName) {\n    return this.trigger('form:' + eventName);\n  }\n\n};\n\nexport default ParsleyForm;\n","import $ from 'jquery';\nimport ParsleyUtils from '../utils';\nimport ParsleyValidator from '../validator';\n\n\nvar ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\n  if (!/ParsleyField/.test(parsleyField.__class__))\n    throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n  var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n  var validator = new ParsleyValidator(validatorSpec);\n\n  $.extend(this, {\n    validator: validator,\n    name: name,\n    requirements: requirements,\n    priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n    isDomConstraint: true === isDomConstraint\n  });\n  this._parseRequirements(parsleyField.options);\n};\n\nvar capitalize = function(str) {\n  var cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n\nConstraintFactory.prototype = {\n  validate: function(value, instance) {\n    var args = this.requirementList.slice(0); // Make copy\n    args.unshift(value);\n    args.push(instance);\n    return this.validator.validate.apply(this.validator, args);\n  },\n\n  _parseRequirements: function(options) {\n    this.requirementList = this.validator.parseRequirements(this.requirements, key => {\n      return options[this.name + capitalize(key)];\n    });\n  }\n};\n\nexport default ConstraintFactory;\n\n","import $ from 'jquery';\nimport ConstraintFactory from './factory/constraint';\nimport ParsleyUI from './ui';\nimport ParsleyUtils from './utils';\n\nvar ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\n  this.__class__ = 'ParsleyField';\n  this.__id__ = ParsleyUtils.generateID();\n\n  this.$element = $(field);\n\n  // Set parent if we have one\n  if ('undefined' !== typeof parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some properties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.validationResult = [];\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nParsleyField.prototype = {\n  // # Public API\n  // Validate field and trigger some events for mainly `ParsleyUI`\n  // @returns `true`, an array of the validators that failed, or\n  // `null` if validation is not finished. Prefer using whenValidate\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n      options = {options};\n    }\n    var promise = this.whenValidate(options);\n    if (!promise)  // If excluded with `group` option\n      return true;\n    switch (promise.state()) {\n      case 'pending': return null;\n      case 'resolved': return true;\n      case 'rejected': return this.validationResult;\n    }\n  },\n\n  // Validate field and trigger some events for mainly `ParsleyUI`\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if field is not in the given `group`.\n  whenValidate: function ({force, group} =  {}) {\n    // do not validate a field if not the same as given validation group\n    this.refreshConstraints();\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.value = this.getValue();\n\n    // Field Validate event. `this.value` could be altered for custom needs\n    this._trigger('validate');\n\n    return this.whenValid({force, value: this.value, _refreshed: true})\n      .done(() =>   { this._trigger('success'); })\n      .fail(() =>   { this._trigger('error'); })\n      .always(() => { this._trigger('validated'); });\n  },\n\n  hasConstraints: function () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional field does not need validation\n  needsValidation: function (value) {\n    if ('undefined' === typeof value)\n      value = this.getValue();\n\n    // If a field is empty and not required, it is valid\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n      return false;\n\n    return true;\n  },\n\n  _isInGroup: function (group) {\n    if ($.isArray(this.options.group))\n      return -1 !== $.inArray(group, this.options.group);\n    return this.options.group === group;\n  },\n\n  // Just validate field. Do not trigger any event.\n  // Returns `true` iff all constraints pass, `false` if there are failures,\n  // or `null` if the result can not be determined yet (depends on a promise)\n  // See also `whenValid`.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n      var [force, value] = arguments;\n      options = {force, value};\n    }\n    var promise = this.whenValid(options);\n    if (!promise) // Excluded via `group`\n      return true;\n    return statusMapping[promise.state()];\n  },\n\n  // Just validate field. Do not trigger any event.\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if the field is not in the given `group`.\n  // The argument `force` will force validation of empty fields.\n  // If a `value` is given, it will be validated instead of the value of the input.\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\n    // Recompute options and rebind constraints to have latest changes\n    if (!_refreshed)\n      this.refreshConstraints();\n    // do not validate a field if not the same as given validation group\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.validationResult = true;\n\n    // A field without constraint is valid\n    if (!this.hasConstraints())\n      return $.when();\n\n    // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\n    if ('undefined' === typeof value || null === value)\n      value = this.getValue();\n\n    if (!this.needsValidation(value) && true !== force)\n      return $.when();\n\n    var groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n    $.each(groupedConstraints, (_, constraints) => {\n      // Process one group of constraints at a time, we validate the constraints\n      // and combine the promises together.\n      var promise = $.when(\n        ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\n      );\n      promises.push(promise);\n      if (promise.state() === 'rejected')\n        return false; // Interrupt processing if a group has already failed\n    });\n    return $.when.apply($, promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: function(value, constraint) {\n    var result = constraint.validate(value, this);\n    // Map false to a failed promise\n    if (false === result)\n      result = $.Deferred().reject();\n    // Make sure we return a promise and that we record failures\n    return $.when(result).fail(errorMessage => {\n      if (true === this.validationResult)\n        this.validationResult = [];\n      this.validationResult.push({\n        assert: constraint,\n        errorMessage: 'string' === typeof errorMessage && errorMessage\n      });\n    });\n  },\n\n  // @returns Parsley field computed value that could be overrided or configured in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be overriden in DOM or with explicit options\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      value = this.options.value;\n    else\n      value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    if ('undefined' === typeof value || null === value)\n      return '';\n\n    return this._handleWhitespace(value);\n  },\n\n  // Actualize options that could have change since previous validation\n  // Re-bind accordingly constraints (could be some new, removed or updated)\n  refreshConstraints: function () {\n    return this.actualizeOptions()._bindConstraints();\n  },\n\n  /**\n  * Add a new constraint to a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements      optional\n  * @param {Number}   priority          optional\n  * @param {Boolean}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.validators[name]) {\n      var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n      // if constraint already exist, delete it and push new version\n      if ('undefined' !== this.constraintsByName[constraint.name])\n        this.removeConstraint(constraint.name);\n\n      this.constraints.push(constraint);\n      this.constraintsByName[constraint.name] = constraint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeConstraint: function (name) {\n    for (var i = 0; i < this.constraints.length; i++)\n      if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n    return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConstraint: function (name, parameters, priority) {\n    return this.removeConstraint(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Internals\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n  _bindConstraints: function () {\n    var constraints = [];\n    var constraintsByName = {};\n\n    // clean all existing DOM constraints to only keep javascript user constraints\n    for (var i = 0; i < this.constraints.length; i++)\n      if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.constraintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constraints\n    for (var name in this.options)\n      this.addConstraint(name, this.options[name], undefined, true);\n\n    // finally, bind special HTML5 constraints\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bind specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: function () {\n    // html5 required\n    if (this.$element.hasClass('required') || this.$element.attr('required'))\n      this.addConstraint('required', true, undefined, true);\n\n    // html5 pattern\n    if ('string' === typeof this.$element.attr('pattern'))\n      this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n    // range\n    if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\n      this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n    // HTML5 min\n    else if ('undefined' !== typeof this.$element.attr('min'))\n      this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n    // HTML5 max\n    else if ('undefined' !== typeof this.$element.attr('max'))\n      this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n\n    // length\n    if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\n      this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n    // HTML5 minlength\n    else if ('undefined' !== typeof this.$element.attr('minlength'))\n      this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n    // HTML5 maxlength\n    else if ('undefined' !== typeof this.$element.attr('maxlength'))\n      this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n\n    // html5 types\n    var type = this.$element.attr('type');\n\n    if ('undefined' === typeof type)\n      return this;\n\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n    if ('number' === type) {\n      return this.addConstraint('type', ['number', {\n        step: this.$element.attr('step'),\n        base: this.$element.attr('min') || this.$element.attr('value')\n      }], undefined, true);\n    // Regular other HTML5 supported types\n    } else if (/^(email|url|range)$/i.test(type)) {\n      return this.addConstraint('type', type, undefined, true);\n    }\n    return this;\n  },\n\n  // Internal only.\n  // Field is required if have required constraint without `false` value\n  _isRequired: function () {\n    if ('undefined' === typeof this.constraintsByName.required)\n      return false;\n\n    return false !== this.constraintsByName.required.requirements;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventName) {\n    return this.trigger('field:' + eventName);\n  },\n\n  // Internal only\n  // Handles whitespace in a value\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n  _handleWhitespace: function (value) {\n    if (true === this.options.trimValue)\n      ParsleyUtils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n    if ('squish' === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, ' ');\n\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n      value = ParsleyUtils.trimString(value);\n\n    return value;\n  },\n\n  // Internal only.\n  // Returns the constraints, grouped by descending priority.\n  // The result is thus an array of arrays of constraints.\n  _getGroupedConstraints: function () {\n    if (false === this.options.priorityEnabled)\n      return [this.constraints];\n\n    var groupedConstraints = [];\n    var index = {};\n\n    // Create array unique of priorities\n    for (var i = 0; i < this.constraints.length; i++) {\n      var p = this.constraints[i].priority;\n      if (!index[p])\n        groupedConstraints.push(index[p] = []);\n      index[p].push(this.constraints[i]);\n    }\n    // Sort them by priority DESC\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n    return groupedConstraints;\n  }\n\n};\n\nexport default ParsleyField;\n","import $ from 'jquery';\n\nvar ParsleyMultiple = function () {\n  this.__class__ = 'ParsleyFieldMultiple';\n};\n\nParsleyMultiple.prototype = {\n  // Add new `$element` sibling for multiple field\n  addElement: function ($element) {\n    this.$elements.push($element);\n\n    return this;\n  },\n\n  // See `ParsleyField.refreshConstraints()`\n  refreshConstraints: function () {\n    var fieldConstraints;\n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    if (this.$element.is('select')) {\n      this.actualizeOptions()._bindConstraints();\n\n      return this;\n    }\n\n    // Gather all constraints for each input in the multiple group\n    for (var i = 0; i < this.$elements.length; i++) {\n\n      // Check if element have not been dynamically removed since last binding\n      if (!$('html').has(this.$elements[i]).length) {\n        this.$elements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n      for (var j = 0; j < fieldConstraints.length; j++)\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\n\n  // See `ParsleyField.getValue()`\n  getValue: function () {\n    // Value could be overriden in DOM\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      return this.options.value;\n\n    // Radio input case\n    if (this.$element.is('input[type=radio]'))\n      return this._findRelated().filter(':checked').val() || '';\n\n    // checkbox input case\n    if (this.$element.is('input[type=checkbox]')) {\n      var values = [];\n\n      this._findRelated().filter(':checked').each(function () {\n        values.push($(this).val());\n      });\n\n      return values;\n    }\n\n    // Select multiple case\n    if (this.$element.is('select') && null === this.$element.val())\n      return [];\n\n    // Default case that should never happen\n    return this.$element.val();\n  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    return this;\n  }\n};\n\nexport default ParsleyMultiple;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyAbstract from './abstract';\nimport ParsleyForm from './form';\nimport ParsleyField from './field';\nimport ParsleyMultiple from './multiple';\n\nvar ParsleyFactory = function (element, options, parsleyFormInstance) {\n  this.$element = $(element);\n\n  // If the element has already been bound, returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$element.data('Parsley');\n  if (savedparsleyFormInstance) {\n\n    // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = parsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n    }\n\n    return savedparsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM element or jQuery $element\n  if (!this.$element.length)\n    throw new Error('You must bind Parsley on an existing element.');\n\n  if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\n    throw new Error('Parent instance must be a ParsleyForm instance');\n\n  this.parent = parsleyFormInstance || window.Parsley;\n  return this.init(options);\n};\n\nParsleyFactory.prototype = {\n  init: function (options) {\n    this.__class__ = 'Parsley';\n    this.__version__ = '@@version';\n    this.__id__ = ParsleyUtils.generateID();\n\n    // Pre-compute options\n    this._resetOptions(options);\n\n    // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n    if (this.$element.is('form') || (ParsleyUtils.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n      return this.bind('parsleyForm');\n\n    // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n  },\n\n  isMultiple: function () {\n    return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\n  },\n\n  // Multiples fields are a real nightmare :(\n  // Maybe some refactoring would be appreciated here...\n  handleMultiple: function () {\n    var name;\n    var multiple;\n    var parsleyMultipleInstance;\n\n    // Handle multiple name\n    if (this.options.multiple)\n      ; // We already have our 'multiple' identifier\n    else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\n      this.options.multiple = name = this.$element.attr('name');\n    else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\n      this.options.multiple = this.$element.attr('id');\n\n    // Special select multiple input\n    if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n      this.options.multiple = this.options.multiple || this.__id__;\n      return this.bind('parsleyFieldMultiple');\n\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n    } else if (!this.options.multiple) {\n      ParsleyUtils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n      return this;\n    }\n\n    // Remove special chars\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n    if ('undefined' !== typeof name) {\n      $('input[name=\"' + name + '\"]').each((i, input) => {\n        if ($(input).is('input[type=radio], input[type=checkbox]'))\n          $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\n      });\n    }\n\n    // Check here if we don't already have a related multiple instance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i = 0; i < $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n      if ('undefined' !== typeof parsleyMultipleInstance) {\n\n        if (!this.$element.data('ParsleyFieldMultiple')) {\n          parsleyMultipleInstance.addElement(this.$element);\n        }\n\n        break;\n      }\n    }\n\n    // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n    // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n    this.bind('parsleyField', true);\n\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n  },\n\n  // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInstance;\n\n    switch (type) {\n      case 'parsleyForm':\n        parsleyInstance = $.extend(\n          new ParsleyForm(this.$element, this.domOptions, this.options),\n          window.ParsleyExtend\n        )._bindFields();\n        break;\n      case 'parsleyField':\n        parsleyInstance = $.extend(\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\n          window.ParsleyExtend\n        );\n        break;\n      case 'parsleyFieldMultiple':\n        parsleyInstance = $.extend(\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\n          new ParsleyMultiple(),\n          window.ParsleyExtend\n        )._init();\n        break;\n      default:\n        throw new Error(type + 'is not a supported Parsley type');\n    }\n\n    if (this.options.multiple)\n      ParsleyUtils.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n    if ('undefined' !== typeof doNotStore) {\n      this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n      return parsleyInstance;\n    }\n\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n    this.$element.data('Parsley', parsleyInstance);\n\n    // Tell the world we have a new ParsleyForm or ParsleyField instance!\n    parsleyInstance._trigger('init');\n\n    return parsleyInstance;\n  }\n};\n\nexport default ParsleyFactory;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyDefaults from './defaults';\nimport ParsleyAbstract from './abstract';\nimport ParsleyValidatorRegistry from './validator_registry';\nimport ParsleyUI from './ui';\nimport ParsleyForm from './form';\nimport ParsleyField from './field';\nimport ParsleyMultiple from './multiple';\nimport ParsleyFactory from './factory';\n\nvar vernums = $.fn.jquery.split('.');\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n}\nif (!vernums.forEach) {\n  ParsleyUtils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n}\n// Inherit `on`, `off` & `trigger` to Parsley:\nvar Parsley = $.extend(new ParsleyAbstract(), {\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: ParsleyFactory,\n    version: '@@version'\n  });\n\n// Supplement ParsleyField and Form with ParsleyAbstract\n// This way, the constructors will have access to those methods\n$.extend(ParsleyField.prototype, ParsleyAbstract.prototype);\n$.extend(ParsleyForm.prototype, ParsleyAbstract.prototype);\n// Inherit actualizeOptions and _resetOptions:\n$.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n// ### jQuery API\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length > 1) {\n    var instances = [];\n\n    this.each(function () {\n      instances.push($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Return undefined if applied to non existing DOM element\n  if (!$(this).length) {\n    ParsleyUtils.warn('You must bind Parsley on an existing element.');\n\n    return;\n  }\n\n  return new ParsleyFactory(this, options);\n};\n\n// ### ParsleyField and ParsleyForm extension\n// Ensure the extension is now defined if it wasn't previously\nif ('undefined' === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any existing values\nParsley.options = $.extend(ParsleyUtils.objectCreate(ParsleyDefaults), window.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\nwindow.ParsleyUtils = ParsleyUtils;\n\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\nvar registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n  window.Parsley[method] = $.proxy(registry, method);\n  window.ParsleyValidator[method] = function () {\n    ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n    return window.Parsley[method](...arguments);\n  };\n});\n\n// ### ParsleyUI\n// UI is a separate class that only listens to some events and then modifies the DOM accordingly\n// Could be overriden by defining a `window.ParsleyConfig.ParsleyUI` appropriate class (with `listen()` method basically)\nwindow.ParsleyUI = 'function' === typeof window.ParsleyConfig.ParsleyUI ?\n  new window.ParsleyConfig.ParsleyUI().listen() : new ParsleyUI().listen();\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(function () {\n    // Works only on `data-parsley-validate`.\n    if ($('[data-parsley-validate]').length)\n      $('[data-parsley-validate]').parsley();\n  });\n}\n\nexport default Parsley;\n","import $ from 'jquery';\n\nimport Parsley from './main';\n\n$.extend(true, Parsley, {\n  asyncValidators: {\n    'default': {\n      fn: function (xhr) {\n        // By default, only status 2xx are deemed successful.\n        // Note: we use status instead of state() because responses with status 200\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\n        // result in state() === 'rejected'.\n        return xhr.status >= 200 && xhr.status < 300;\n      },\n      url: false\n    },\n    reverse: {\n      fn: function (xhr) {\n        // If reverse option is set, a failing ajax request is considered successful\n        return xhr.status < 200 || xhr.status >= 300;\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n      url: url || false,\n      options: options || {}\n    };\n\n    return this;\n  }\n\n});\n\nParsley.addValidator('remote', {\n  requirementType: {\n    '': 'string',\n    'validator': 'string',\n    'reverse': 'boolean',\n    'options': 'object'\n  },\n\n  validateString: function (value, url, options, instance) {\n    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n    if ('undefined' === typeof Parsley.asyncValidators[validator])\n      throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n    url = Parsley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if (url.indexOf('{value}') > -1) {\n      url = url.replace('{value}', encodeURIComponent(value));\n    } else {\n      data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n    }\n\n    // Merge options passed in from the function with the ones in the attribute\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n    ajaxOptions = $.extend(true, {}, {\n      url: url,\n      data: data,\n      type: 'GET'\n    }, remoteOptions);\n\n    // Generate store key based on ajax options\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n    // Initialise querry cache\n    if ('undefined' === typeof Parsley._remoteCache)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) // Map falsy results to rejected promise\n        result = $.Deferred().reject();\n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXhr);\n  },\n\n  priority: -1\n});\n\nParsley.on('form:submit', function () {\n  Parsley._remoteCache = {};\n});\n\nwindow.ParsleyExtend.addAsyncValidator = function () {\n  ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n  return Parsley.addAsyncValidator(...arguments);\n};\n","// This is included with the Parsley library itself,\n// thus there is no use in adding it to your project.\nimport Parsley from '../parsley/main';\n\nParsley.addMessages('en', {\n  defaultMessage: \"This value seems to be invalid.\",\n  type: {\n    email:        \"This value should be a valid email.\",\n    url:          \"This value should be a valid url.\",\n    number:       \"This value should be a valid number.\",\n    integer:      \"This value should be a valid integer.\",\n    digits:       \"This value should be digits.\",\n    alphanum:     \"This value should be alphanumeric.\"\n  },\n  notblank:       \"This value should not be blank.\",\n  required:       \"This value is required.\",\n  pattern:        \"This value seems to be invalid.\",\n  min:            \"This value should be greater than or equal to %s.\",\n  max:            \"This value should be lower than or equal to %s.\",\n  range:          \"This value should be between %s and %s.\",\n  minlength:      \"This value is too short. It should have %s characters or more.\",\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n  mincheck:       \"You must select at least %s choices.\",\n  maxcheck:       \"You must select %s choices or fewer.\",\n  check:          \"You must select between %s and %s choices.\",\n  equalto:        \"This value should be the same.\"\n});\n\nParsley.setLocale('en');\n","import $ from 'jquery';\nimport Parsley from './parsley/main';\nimport './parsley/pubsub';\nimport './parsley/remote';\nimport './i18n/en';\n\nexport default Parsley;\n"],"sourceRoot":"/source/"}